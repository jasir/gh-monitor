#!/bin/bash

# GitHub Actions Monitor Script
# Sleduje stav GitHub Action run a notifikuje p≈ôi dokonƒçen√≠

set -e

# Barvy pro output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkce pro zobrazen√≠ n√°povƒõdy
show_help() {
    echo "GitHub Actions Monitor"
    echo ""
    echo "Usage: $0 <run_id> [options]"
    echo ""
    echo "Parametry:"
    echo "  run_id              ID GitHub Action run (povinn√©)"
    echo ""
    echo "Volby:"
    echo "  -r, --repo REPO     Repository ve form√°tu owner/repo (v√Ωchoz√≠: aktu√°ln√≠ repo)"
    echo "  -i, --interval SEC  Interval kontroly v sekund√°ch (v√Ωchoz√≠: 10)"
    echo "  -t, --timeout MIN   Timeout v minut√°ch (v√Ωchoz√≠: 60)"
    echo "  -q, --quiet         Tich√Ω re≈æim - pouze koneƒçn√° notifikace"
    echo "  -h, --help          Zobraz√≠ tuto n√°povƒõdu"
    echo ""
    echo "P≈ô√≠klady:"
    echo "  $0 16648023936"
    echo "  $0 16648023936 --repo KosikGroup/web-frontend"
    echo "  $0 16648023936 --interval 10 --timeout 120"
}

# Funkce pro notifikaci
notify() {
    local title="$1"
    local message="$2"
    local urgency="${3:-normal}"
    local url="${4:-}"
    
    echo ""
    echo "üîî ========================================"
    echo "   $title"
    echo "   $message"
    if [[ -n "$url" ]]; then
        echo "   üîó $url"
    fi
    echo "========================================"
    echo ""
    
    # Desktop notifikace - v≈ædy se pokus√≠ odeslat
    if command -v notify-send >/dev/null 2>&1 && [[ -n "$DISPLAY" ]]; then
        # Odebr√°n√≠ escape sekvenc√≠ pro ƒçist√Ω text v notifikaci
        local clean_message=$(echo -e "$message" | sed 's/\\033\[[0-9;]*m//g')
        
        # P≈ôid√°n√≠ URL do notifikace pokud existuje
        if [[ -n "$url" ]]; then
            clean_message="$clean_message\n\nüîó Zobrazit: $url"
        fi
        
        # Persistent notifikace pro critical a completion
        if [[ "$urgency" == "critical" ]] || [[ "$urgency" == "completion" ]]; then
            if notify-send -t 0 -u "critical" "$title" "$clean_message" 2>/dev/null; then
                echo "üì± Persistent notifikace odesl√°na (vy≈æaduje ruƒçn√≠ zav≈ôen√≠)"
            else
                echo "‚ö†Ô∏è  Desktop notifikace nedostupn√° (nen√≠ GUI prost≈ôed√≠)"
            fi
        else
            if notify-send -t 5000 -u "$urgency" "$title" "$clean_message" 2>/dev/null; then
                echo "üì± Desktop notifikace odesl√°na"
            else
                echo "‚ö†Ô∏è  Desktop notifikace nedostupn√° (nen√≠ GUI prost≈ôed√≠)"
            fi
        fi
    else
        echo "‚ö†Ô∏è  Desktop notifikace nedostupn√° (chyb√≠ notify-send nebo DISPLAY)"
    fi
    
    # Audio sign√°l pro dokonƒçen√≠
    if [[ "$urgency" == "critical" ]] && command -v paplay >/dev/null 2>&1; then
        paplay /usr/share/sounds/alsa/Front_Left.wav 2>/dev/null || true
    elif [[ "$urgency" == "critical" ]] && command -v beep >/dev/null 2>&1; then
        beep -f 800 -l 300 2>/dev/null || true
    fi
}

# Funkce pro z√≠sk√°n√≠ stavu run
get_run_status() {
    local run_id="$1"
    local repo="$2"
    
    if [[ -n "$repo" ]]; then
        gh run view "$run_id" --repo "$repo" --json status,conclusion,name,createdAt,url,jobs
    else
        gh run view "$run_id" --json status,conclusion,name,createdAt,url,jobs
    fi
}

# Funkce pro zobrazen√≠ aktu√°ln√≠ch job≈Ø
show_current_jobs() {
    local jobs_json="$1"
    local max_jobs=3
    
    if [[ "$jobs_json" == "null" ]] || [[ -z "$jobs_json" ]]; then
        return
    fi
    
    # Najdi bƒõ≈æ√≠c√≠ joby
    local running_jobs=$(echo "$jobs_json" | jq -r '.[] | select(.status == "in_progress") | .name')
    # Najdi joby ve frontƒõ
    local queued_jobs=$(echo "$jobs_json" | jq -r '.[] | select(.status == "queued") | .name')
    
    if [[ -n "$running_jobs" ]]; then
        echo -e "   ${BLUE}üîÑ Bƒõ≈æ√≠c√≠ kroky:${NC}"
        echo "$running_jobs" | head -$max_jobs | while read -r job; do
            [[ -n "$job" ]] && echo "     ‚Ä¢ $job"
        done
        
        local running_count=$(echo "$running_jobs" | wc -l)
        if [[ $running_count -gt $max_jobs ]]; then
            echo "     ... a dal≈°√≠ch $((running_count - max_jobs)) krok≈Ø"
        fi
    fi
    
    if [[ -n "$queued_jobs" ]]; then
        echo -e "   ${YELLOW}‚è≥ Ve frontƒõ:${NC}"
        echo "$queued_jobs" | head -2 | while read -r job; do
            [[ -n "$job" ]] && echo "     ‚Ä¢ $job"
        done
        
        local queued_count=$(echo "$queued_jobs" | wc -l)
        if [[ $queued_count -gt 2 ]]; then
            echo "     ... a dal≈°√≠ch $((queued_count - 2)) krok≈Ø"
        fi
    fi
}

# Funkce pro zobrazen√≠ stavu
show_status() {
    local status="$1"
    local conclusion="$2"
    local name="$3"
    local run_id="$4"
    local elapsed="$5"
    local jobs_json="$6"
    
    case "$status" in
        "completed")
            case "$conclusion" in
                "success")
                    echo -e "${GREEN}‚úÖ DOKONƒåENO - √öSPƒöCH${NC}"
                    ;;
                "failure")
                    echo -e "${RED}‚ùå DOKONƒåENO - CHYBA${NC}"
                    ;;
                "cancelled")
                    echo -e "${YELLOW}üö´ DOKONƒåENO - ZRU≈†ENO${NC}"
                    ;;
                *)
                    echo -e "${YELLOW}‚ö†Ô∏è  DOKONƒåENO - $conclusion${NC}"
                    ;;
            esac
            ;;
        "in_progress")
            echo -e "${BLUE}üîÑ Bƒö≈Ω√ç${NC}"
            ;;
        "queued")
            echo -e "${YELLOW}‚è≥ VE FRONTƒö${NC}"
            ;;
        "waiting")
            echo -e "${RED}‚è∏Ô∏è  ƒåEK√Å NA AKCI U≈ΩIVATELE${NC}"
            ;;
        *)
            echo -e "${YELLOW}‚ùì NEZN√ÅM√ù STAV: $status${NC}"
            ;;
    esac
    
    echo "   Workflow: $name"
    echo "   Run ID: $run_id"
    echo "   Uplynul√Ω ƒças: $(format_time $elapsed)"
    
    # Zobraz aktu√°ln√≠ kroky pokud workflow bƒõ≈æ√≠ nebo ƒçek√°
    if [[ "$status" == "in_progress" ]] || [[ "$status" == "queued" ]] || [[ "$status" == "waiting" ]]; then
        show_current_jobs "$jobs_json"
    fi
}

# Funkce pro form√°tov√°n√≠ ƒçasu
format_time() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(((seconds % 3600) / 60))
    local secs=$((seconds % 60))
    
    if [[ $hours -gt 0 ]]; then
        printf "%dh %dm %ds" $hours $minutes $secs
    elif [[ $minutes -gt 0 ]]; then
        printf "%dm %ds" $minutes $secs
    else
        printf "%ds" $secs
    fi
}

# Hlavn√≠ funkce
main() {
    local run_id=""
    local repo=""
    local interval=10
    local timeout=3600  # 60 minut v sekund√°ch
    local quiet=false
    
    # Parsov√°n√≠ argument≈Ø
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -r|--repo)
                repo="$2"
                shift 2
                ;;
            -i|--interval)
                interval="$2"
                shift 2
                ;;
            -t|--timeout)
                timeout=$((${2} * 60))  # p≈ôevod na sekundy
                shift 2
                ;;
            -q|--quiet)
                quiet=true
                shift
                ;;
            *)
                if [[ -z "$run_id" ]]; then
                    run_id="$1"
                else
                    echo "Nezn√°m√Ω parametr: $1"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Kontrola povinn√Ωch parametr≈Ø
    if [[ -z "$run_id" ]]; then
        echo "Chyba: Mus√≠te zadat run_id"
        echo ""
        show_help
        exit 1
    fi
    
    # Ovƒõ≈ôen√≠, ≈æe gh je dostupn√©
    if ! command -v gh >/dev/null 2>&1; then
        echo "Chyba: GitHub CLI (gh) nen√≠ nainstalovan√©"
        exit 1
    fi
    
    # Ovƒõ≈ôen√≠, ≈æe jq je dostupn√©
    if ! command -v jq >/dev/null 2>&1; then
        echo "Chyba: jq nen√≠ nainstalovan√© (pot≈ôebn√© pro parsov√°n√≠ JSON)"
        echo "Nainstalujte: sudo apt install jq"
        exit 1
    fi
    
    # Ovƒõ≈ôen√≠ autentifikace
    if ! gh auth status >/dev/null 2>&1; then
        echo "Chyba: Nejste p≈ôihl√°≈°eni do GitHub CLI"
        echo "Spus≈•te: gh auth login"
        exit 1
    fi
    
    echo "üöÄ Spou≈°t√≠m sledov√°n√≠ GitHub Action run..."
    echo "   Run ID: $run_id"
    [[ -n "$repo" ]] && echo "   Repository: $repo"
    echo "   Interval: ${interval}s"
    echo "   Timeout: $(format_time $timeout)"
    echo ""
    
    local start_time=$(date +%s)
    local check_count=0
    
    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        # Kontrola timeout
        if [[ $elapsed -gt $timeout ]]; then
            notify "GitHub Action Timeout" "Sledov√°n√≠ run $run_id bylo ukonƒçeno kv≈Øli timeout" "critical"
            exit 1
        fi
        
        check_count=$((check_count + 1))
        
        # Z√≠sk√°n√≠ stavu
        local status_json
        if ! status_json=$(get_run_status "$run_id" "$repo" 2>/dev/null); then
            echo "‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ stavu run $run_id"
            sleep $interval
            continue
        fi
        
        local status=$(echo "$status_json" | jq -r '.status')
        local conclusion=$(echo "$status_json" | jq -r '.conclusion // "null"')
        local name=$(echo "$status_json" | jq -r '.name')
        local url=$(echo "$status_json" | jq -r '.url')
        local jobs_json=$(echo "$status_json" | jq -r '.jobs')
        
        # Zobrazen√≠ stavu (pokud nen√≠ tich√Ω re≈æim)
        if [[ "$quiet" == false ]]; then
            echo "üìä Kontrola #$check_count ($(date '+%H:%M:%S'))"
            show_status "$status" "$conclusion" "$name" "$run_id" "$elapsed" "$jobs_json"
            echo ""
        fi
        
        # Kontrola zmƒõny stavu z waiting
        if [[ "$status" != "waiting" ]] && [[ -f "/tmp/gh-monitor-${run_id}-waiting" ]]; then
            rm -f "/tmp/gh-monitor-${run_id}-waiting"
            notify "üîî GitHub Action pokraƒçuje" "Workflow: <b>$name</b>\nZmƒõna ze stavu ƒçek√°n√≠\nRun ID: $run_id" "normal" "$url"
        elif [[ "$status" == "waiting" ]] && [[ ! -f "/tmp/gh-monitor-${run_id}-waiting" ]]; then
            touch "/tmp/gh-monitor-${run_id}-waiting"
            notify "‚è∏Ô∏è GitHub Action ƒçek√°" "Workflow: <b>$name</b>\nPot≈ôebuje akci u≈æivatele\nRun ID: $run_id" "critical" "$url"
        fi
        
        # Kontrola, zda je run dokonƒçen
        if [[ "$status" == "completed" ]]; then
            local duration=$(format_time $elapsed)
            
            case "$conclusion" in
                "success")
                    local title="‚úÖ GitHub Action √öSPƒö≈†N√Å"
                    local message="Workflow: <b>$name</b>\nDoba bƒõhu: <i>$duration</i>\nRun ID: $run_id"
                    notify "$title" "$message" "completion" "$url"
                    echo "üéâ Workflow dokonƒçena √∫spƒõ≈°nƒõ!"
                    exit 0
                    ;;
                "failure")
                    local title="‚ùå GitHub Action SELHALA"
                    local message="Workflow: <b>$name</b>\nDoba bƒõhu: <i>$duration</i>\nRun ID: $run_id"
                    notify "$title" "$message" "completion" "$url"
                    echo "üí• Workflow selhala!"
                    echo "üîó Zobrazit na GitHubu: $url"
                    exit 1
                    ;;
                "cancelled")
                    local title="üö´ GitHub Action ZRU≈†ENA"
                    local message="Workflow: <b>$name</b>\nDoba bƒõhu: <i>$duration</i>\nRun ID: $run_id"
                    notify "$title" "$message" "completion" "$url"
                    echo "‚èπÔ∏è  Workflow byla zru≈°ena"
                    exit 2
                    ;;
                *)
                    local title="‚ö†Ô∏è GitHub Action dokonƒçena"
                    local message="Workflow: <b>$name</b>\nStav: <u>$conclusion</u>\nDoba bƒõhu: <i>$duration</i>\nRun ID: $run_id"
                    notify "$title" "$message" "completion" "$url"
                    echo "‚ùì Workflow dokonƒçena s neoƒçek√°van√Ωm stavem: $conclusion"
                    exit 3
                    ;;
            esac
        fi
        
        # ƒåek√°n√≠ p≈ôed dal≈°√≠ kontrolou
        sleep $interval
    done
}

# Spu≈°tƒõn√≠ hlavn√≠ funkce
main "$@"